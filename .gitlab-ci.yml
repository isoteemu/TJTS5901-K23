## Use docker image as a base image.
image: docker:stable

stages:
  - build
  - deploy

## Setup cache path for PIP packages.
## See: https://docs.gitlab.com/ee/ci/caching/#cache-python-dependencies
cache:
  paths:
    - .cache/pip


variables:
  ## Setup image name -variable. Change this if you wish, but watch out
  ## for special characters!
  DOCKER_IMAGE_NAME: tjts5901
  
  ## (Optional) More verbose output from pipeline
  #CI_DEBUG_TRACE: "true"

  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

## Build docker image
build:
  stage: build
  script:
    ## Build a new image, pulling the latest base, and tag it.
    ## If --pull is ommited, base from local is used.
    - docker build --pull -t $DOCKER_IMAGE_NAME .

## Build course documentation. You might not need this stage.
pages:
  stage: build

  ## Use build from previous stage as base image.
  dependencies:
    - build
  image: $DOCKER_IMAGE_NAME

  script:
    ## Install `mkdocs` and generate HTML documentation.
    - pip install --disable-pip-version-check mkdocs mkdocs-material
    - mkdocs build -f docs/mkdocs.yml
  artifacts:
    ## Artifacts are sent to gitlab, and accessible from there.
    paths:
      - _docs/

  rules:
    ## Setup rule so this job is only run on "main" branch
    - if: $CI_COMMIT_BRANCH == "main"

  ## Mark this stage as an "production" environment.
  environment: production

## Push image to container registry
push-image:
  stage: deploy
  dependencies:
    - build
  image: docker:stable

  before_script:
    ## Make some checks that Docker credentials are configured.
    - test -z "$DOCKER_REGISTRY" && (echo "Missing required variable DOCKER_REGISTRY. See 'Pipeline setup.md'"; exit 1)
    - test -z "$DOCKER_AUTH_CONFIG" && (echo "Missing required variable DOCKER_AUTH_CONFIG. See 'Pipeline setup.md'"; exit 1)

  script:
    ## Tag the build image for registry, and push it.
    - docker tag "$DOCKER_IMAGE_NAME" "$DOCKER_REGISTRY:$DOCKER_IMAGE_NAME"
    - docker push "$DOCKER_REGISTRY:$DOCKER_IMAGE_NAME"
